name: 构建打包和部署

# 当代码被推送到 main 分支时触发此工作流程
on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 1. 必须先获取代码！
      uses: actions/checkout@v4 # 高级用法可以 with: ref: main 指定分支等


    - name: 2. 然后才能设置环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'   # 使用 yarn 缓存:将 node_modules 目录缓存起来，下次运行时不需要重新下载所有依赖


    - name: 3. 然后才能安装依赖
      run: yarn install --frozen-lockfile
      env:
        # 确保使用缓存的依赖
        YARN_CACHE_FOLDER: ~/.cache/yarn


    - name: 4. 打包构建
      run: yarn run build


    - name: 5. 获取北京时间
      id: beijing_time
      run: echo "BEIJING_TIME=$(TZ=Asia/Shanghai date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV


    - name: 6. 推送构建结果到build分支
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Yc Action"
        git checkout --orphan temp-build
        git rm -rf .
        rm -rf node_modules                       # 移除 node_modules
        # find . -name "*s.map" -exec rm -f {} \;   # 移除所有js.map和css.map文件
        mv dist/* .
        git add -f *
        git commit -m "yc自动打包 - ${{ env.BEIJING_TIME }}"
        git push origin HEAD:build -f

    # 请求脚本并获取返回值
    - name: 请求服务器更新前端并获取结果
      run: |
        echo "SCRIPT_OUTPUT=$(curl -s ${{ secrets.URL }})" >> $GITHUB_ENV

      # 构建成功后发送邮件
    - name: 成功后发送电子邮件通知我
      if: success() # 这会确保只在成功时发送邮件
      uses: dawidd6/action-send-mail@v2
      with: # 以下是发送邮件需要提供的一些配置信息
        server_address: smtp.qq.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 打包成功 - ${{ env.SCRIPT_OUTPUT }}
        to: ${{ secrets.TO_EMAIL }}
        from: GitHub Actions
        body: 构建成功。构建时间：${{ env.BEIJING_TIME }}。脚本输出：${{ env.SCRIPT_OUTPUT }}

#    # 推送构建结果到 Gitee
#    - name: 强制推送构建结果到Gitee
#      run: |
#        git remote add gitee https://yc556:${{ secrets.GITEE_TOKEN }}@gitee.com/yc556/yc556.git
#        git push gitee HEAD:build -f
